# define perfect framing
struct perfect_framing [a,b,c,d]

# define input image size
struct image_size [image_size_y,image_size_z]

# define number of markers used (default = 4)
n = 4

# define other basic constansts
satisfaction = 0
wait_t = 50         # 50ms
d_thresh = 1        # mm
a_thresh = 1        # degree(s)
p_thersh = 1/100    # arbitrary

# create a marker structure/list- OR COULD WE USE A CLASS LIKE IN CPP ? Like an "ROIframe" class with attributes a
# vector of "marker" type subclass. And all functions until the "main" tag be put into methods.
struct marker [y,z,role (BL,BR;TL;TR)]
list marker_list [BL_marker,BR_marker,TL_marker, TR_marker]
struct marker_correction [B_Rx, ROI_center_y, ROI_center_z, A_Rz, D_Ty]

# function that recognizes markers and compute their position

def recognize_markers(&video_input, &marker_list, &marker_correction, &satisfaction, n) #passes by reference to update marker_list
    # function that computes angles and offsets to correct, to be added into recognize_markers.
    def compute_marker_correction(marker_list, &marker_correction) :
    def compute_satisfaction(marker_list, marker_correction, &satisfaction) :

// //faire un case break si n'en voit pas 4.

# main

def main :
while (satisfaction < 0.95) :
    set_camera(&video_input, &marker_list, &marker_correction, &satisfaction, n)
else :
print "Very good setting. Satisfaction is (satisfaction)."
return 1

def set_camera(&video_input, &marker_list, &marker_correction, &satisfaction, n) :

    # Make sure all markers are visible, else move back. Assuming the camera is roughly aligned before starting this program.
    while (marker_list.size != n) :
        if (marker_list.size >= n) :
            print " Error in marker recognition. Too many were recognized. Make sure the camera has proper visibility."
        if (marker_list.size < n) :
            print " Make sure all (n) markers are visible by the camera. Not enough were recognized."  
        wait (wait_t) 
        recognize_markers(&video_input, &marker_list, n)
    
    # Fix the Rx "Twist" rotation axis, using average horizontal line shift angle
    while (marker_correction.B_Rx > a_thresh ) :       # B_Rx angle is not negligble
        print " Turn the camera (B_Rx) degrees around its frontal axis (Rx)."
        wait (wait_t) 
        recognize_markers(&video_input, &marker_list, n)

//  using the roi midplane to align with current framing midplane
    # Fit the center of the ROI to current footage center point (Ry, Rz, Ty)
    while ((marker_correction.ROI_center_y != 0.5*image_size_y+- p_thersh)
     or (marker_correction.ROI_center_z != 0.5*image_size_z+- 1/1000)) :     # while ROI and footage centered are not corresponding
        if (marker_correction.ROI_center_z >= 0.5*image_size_z+- p_thersh) :
            print "Turn camera left (+Ry)."
        if (marker_correction.ROI_center_z < 0.5*image_size_z+- p_thersh) :
            print "Turn camera right (-Ry)." 
        wait (wait_t) 
        recognize_markers(&video_input, &marker_list, n)

    while (abs(marker_correction.A_Rz) > a_thresh) :  # degree
        print "Turn camera (A_Rz) degrees up (+) /down (-) (Rz)." 
        wait (wait_t) 
        recognize_markers(&video_input, &marker_list, n)

//  using the roi midplane to align with current framing midplane
    # assuming that Rz and Ty can be considered independent as long as we see all markers, given camera self correction
    while (abs(marker_correction.D_Ty) > d_thresh) :  # mm
        print "Slide camera (D_Ty) mm(s) up (+) /down (-) (Ty)." 
        wait (wait_t) 
        recognize_markers(&video_input, &marker_list, n)
    

// reecrire avec aire roi /aire visible par camera -> valeure objectif (typiquement 0.8)
    # Fit the Tx distance using the pre-defined "perfect margins" from edge of footage frame to markers.
    # By default I suggest using the bottom left marker (BL), and we only need to verify one alignement, so arbitrarily we using d.
    while (marker_list(1).z != c +- p_thersh) :     # while the BL marker left spacing (simply its z value) isn't right, figure out Tx distance.
        if (marker_list(1).z < c +- p_thersh) :
            print " Camera too close from object. Slide camera a little further from the hive (-Tx)."  
        if (marker_list(1).z > c +- p_thersh) :
            print " Camera too far from object. Slide camera a little closer to the hive (+Tx)."  
        wait (wait_t) 
        recognize_markers(&video_input, &marker_list, n)
